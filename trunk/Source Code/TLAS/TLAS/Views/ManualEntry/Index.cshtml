@model PagedList.IPagedList<TLAS.Models.Shipment>
@using PagedList.Mvc;
<link href="~/Content/PagedList.css" rel="stylesheet" type="text/css" />
<script src="~/Scripts/jquery-1.10.2.min.js"></script>
<link rel="stylesheet" href="~/Content/jquery-ui.css" type="text/css" />
<script src="~/Scripts/jquery-ui.js"></script>
@{
    ViewBag.Title = "Manual Entry";
}
<hr />
<div class="container" >
    <div class="col-md-4">
        <h2>Manual Entry</h2>
        <div class="table-responsive">
            @using (Html.BeginForm("Index", "ManualEntry", FormMethod.Get))
            {
                <p>
                    <div class="form-horizontal">
                        <div class="form-group">
                            <div class="col-md-6">
                                @Html.TextBox("SearchString", ViewBag.CurrentFilter as string, new { @class = "form-control", @title = "Search By Order Code", @placeholder = "Order Code" })
                            </div>
                            <div class="col-md-1" style="margin-left:-23px;">
                                <input type="submit" value="Search" class="btn btn-primary" />
                            </div>
                        </div>

                    </div>

                </p>
            }
            <table class="table table-condensed table-bordered table-hover table-striped">
                @*<table class="table table-condensed table-bordered table-hover">*@
                <thead>
                    <tr class="btn-default">
                        <th><b>@Html.ActionLink("Shipment ID", "Index", new { sortOrder = ViewBag.IdSortParm, currentFilter = ViewBag.CurrentFilter })</b></th>
                        <th><b>@Html.ActionLink("Vehicle Code", "Index", new { sortOrder = ViewBag.VehCodeSortParm, currentFilter = ViewBag.CurrentFilter })</b></th>
                        <th><b>@Html.ActionLink("Order Code", "Index", new { sortOrder = ViewBag.NameSortParm, currentFilter = ViewBag.CurrentFilter })</b></th>
                        <th><b>@Html.ActionLink("Status", "Index")</b></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in Model)
                    {
                        <tr onclick="edit('@item.ID','@item.IsManual','@item.AccessCardID','@item.ModifiedDate','@item.DeletedFlag','@item.CreatedDate','@item.ShipmentStatusID','@item.OrderID','@item.BayID','@item.BayName','@item.CustomerName','@item.VehicleCode','@item.DriverName','@item.DriverCNIC','@item.CarrierName','@item.ShipmentDate','@item.ProductID','@item.VehicleCode','@item.Order.OrderQty','@item.Order.OrderCode', '@item.RemarksManual');">
                            <td>
                                @Html.DisplayFor(modelItem => item.ID)
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => item.VehicleCode)
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => item.Order.OrderCode)
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => item.ShipmentStatu.Status)
                            </td>
                        </tr>
                    }

                </tbody>
            </table>
            <br />
            Page @(Model.PageCount < Model.PageNumber ? 0 : Model.PageNumber) of @Model.PageCount
            @Html.PagedListPager(Model, page => Url.Action("Index", new { page, sortOrder = ViewBag.CurrentSort, currentFilter = ViewBag.CurrentFilter }))
        </div>
    </div>



    @using (Html.BeginForm("Create", "ManualEntry", FormMethod.Post, new { @id = "formAllMan" }))
    {
        <div class="col-md-8">
            @Html.ValidationSummary(true, "", new { @class = "text-danger", @id = "errorSummary" })
            @Html.Label(" ", new { @id = "errorMessagesOnSave", Style = "color: red" })
            <div class="form-group ">
                <div class="btn-group col-md-offset-4">
                    <button type="submit" class="btn btn-primary" id="save" disabled>Save</button>
                    <button type="submit" class="btn btn-primary" id="close" onclick="closePressed();" disabled>Close</button>
                </div>
            </div>
            <div class="form-horizontal">
                @*@Html.HiddenFor(m => Model.FirstOrDefault().ModifiedDate, new { @Value = System.DateTime.Now })
                    @Html.HiddenFor(m => Model.FirstOrDefault().CreatedDate, new { @Value = System.DateTime.Now })*@
                @Html.HiddenFor(m => Model.FirstOrDefault().ID, new { @id = "shipmentId" })
                @Html.HiddenFor(m => Model.FirstOrDefault().ShipmentStatusID, new { @id = "shipmentStatusId" })
                @Html.HiddenFor(m => Model.FirstOrDefault().ProductID, new { @id = "productId" })
                @Html.HiddenFor(m => Model.FirstOrDefault().Order.OrderQty, new { @id = "odrQty" })
                @Html.HiddenFor(m => Model.FirstOrDefault().OrderID, new { @id = "odrId" })
                @Html.HiddenFor(m => Model.FirstOrDefault().AccessCardID, new { @id = "accessId" })
                <div class="form-group">
                    <label for="custName" class="col-md-4 control-label">Customer Name</label>
                    <div class="col-md-4">
                        @Html.EditorFor(m => Model.FirstOrDefault().CustomerName, new { htmlAttributes = new { @class = "form-control", @id = "custName", @readonly = "readonly" } })
                    </div>
                </div>
                <div class="form-group">
                    <label for="carrName" class="col-md-4 control-label">Carrier Name</label>
                    <div class="col-md-4">
                        @Html.EditorFor(m => Model.FirstOrDefault().CarrierName, new { htmlAttributes = new { @class = "form-control", @id = "carrName", @readonly = "readonly" } })
                    </div>
                </div>
                <div class="form-group">
                    <label for="custName" class="col-md-4 control-label">Vehicle Code</label>
                    <div class="col-md-4">
                        @Html.EditorFor(m => Model.FirstOrDefault().VehicleCode, new { htmlAttributes = new { @class = "form-control", @id = "vehCode", @readonly = "readonly" } })
                    </div>
                </div>
                <div class="form-group">
                    <label for="custName" class="col-md-4 control-label">Driver Name</label>
                    <div class="col-md-4">
                        @Html.EditorFor(m => Model.FirstOrDefault().DriverName, new { htmlAttributes = new { @class = "form-control", @id = "drvName", @readonly = "readonly" } })
                    </div>
                </div>
                <div class="form-group">
                    <label for="remarks" class="col-md-4 control-label">Remarks</label>
                    <div class="col-md-4">
                        @Html.TextAreaFor(m => Model.FirstOrDefault().RemarksManual, new { @class = "form-control", @id = "remarks", cols = 35, @rows = 5 })
                    </div>
                </div>
            </div>


        </div>



        <div class="container">
            <div class="col-md-10">
                <h2>Compartment</h2>
                <div class="table-responsive">
                    <table class="table table-condensed table-bordered table-hover table-striped">
                        <thead>
                            <tr class="btn-primary">
                                <th><b>Compartment Code</b></th>
                                <th><b>Order Code</b></th>
                                <th><b>Product</b></th>
                                <th><b>Ordered Qty</b></th>
                                <th><b>Capacity</b></th>
                                <th><b>Planned Qty</b></th>
                                <th><b>Actual Qty</b></th>
                                @*<th><b>Dip Qty</b></th>*@
                                <th><b>Pre Dip</b></th>
                                <th><b>Post Dip</b></th>
                                <th><b>Difference</b></th>
                            </tr>
                        </thead>
                        <tbody id="compTableMan">

                            @*<tr>
                                    <td><span></span></td>
                                    <td><span></span></td>
                                    <td><span></span></td>
                                </tr>*@


                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    }
</div>



    @section Scripts {
        @*@Scripts.Render("~/bundles/jquery")*@
        @Scripts.Render("~/bundles/jqueryval")
        @*@Scripts.Render("~/bundles/jqueryui")
        @Styles.Render("~/Content/cssjqryUi")*@
    }
@*<style type="text/css">
.table-hover tbody tr:hover td, .table-hover tbody tr:hover th {
  background-color: #0094ff;
}
</style>*@


    <script type="text/javascript">

        function OnClickEventForPRE_POST(compPreDip, compPostDip, compDelta) {
            $("#" + compDelta.id).val($("#" + compPostDip.id).val() - $("#" + compPreDip.id).val());
            if ($("#" + compDelta.id).val() < 0) {
                $("#" + compDelta.id).css('color', 'red');
            }
            if ($("#" + compDelta.id).val() > 0) {
                $("#" + compDelta.id).css('color', 'black');
            }
        }

        $("#SearchString").autocomplete({

            source: function (request, response) {

                var customer = new Array();

                $.ajax({
                    async: false,
                    cache: false,
                    type: "POST",
                    url: "@(Url.Action("GetAutoComplete", "ManualEntry"))",
                    data: { "term": request.term },
                success: function (data) {
                    debugger;
                    for (var i = 0; i < data.length ; i++) {
                        customer[i] = { label:data[i] };
                    }
                }
            });
        response(customer);
        }
        });

        $(function () {

            $('#custName').val("")
            $('#vehCode').val("")
            $('#drvName').val("")
            $('#carrName').val("")
            $('#remarks').val("")
            
            ////////////////////////////////
            $('#formAllMan').validate({
                errorClass: "text-danger",
                debug: true,
                rules: {
                    CarrierName: {
                        required: true,
                    }
                },
                messages: {
                    CarrierName: {
                        required: "Shipment Date is required."
                    }
                }
            });


            ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            $(document).on('click', 'form button[type=submit]', function (e) {

                if ($('#compTableMan tr').length == 0) {
                    $("#errorMessagesOnSave").text("No Compartment found");
                    e.preventDefault();
                    return;
                }
                else if ($('#compTableMan tr').length > 0) {
                            for (var i = 0; i < $('#compTableMan tr').length; i++) {
                                $("#compActualQty" + i).rules("add", {
                                    required: true,
                                    digits: true,
                                    messages: {
                                        required: "Only digits allowed"
                                    }
                                });
                            }
                    ////////////////////////////////////////////////////////////////////////
                            //for (var i = 0; i < $('#compTableMan tr').length; i++) {
                            //    $("#compManualQty" + i).rules("add", {
                            //        required: true,
                            //        digits: true,
                            //        messages: {
                            //            required: "Only digits allowed"
                            //        }
                            //    });
                            //}
                            for (var i = 0; i < $('#compTableMan tr').length; i++) {
                                $("#compActualQty" + i).rules("add", {
                                    required: true,
                                    digits: true,
                                    messages: {
                                        required: "Required"
                                    }
                                });
                            }
                            for (var i = 0; i < $('#compTableMan tr').length; i++) {
                                $("#compManualPreDip" + i).rules("add", {
                                    required: true,
                                    digits: true,
                                    messages: {
                                        required: "Required"
                                    }
                                });
                            }
                            for (var i = 0; i < $('#compTableMan tr').length; i++) {
                                $("#compManualPostDip" + i).rules("add", {
                                    required: true,
                                    digits: true,
                                    messages: {
                                        required: "Required"
                                    }
                                });
                            }
                    ////////////////////////////////////////////////////////////////////////
                            var newValid = $('#formAllMan').valid();
                            if (!newValid) {
                                e.preventDefault(); //prevent the default action
                                return;
                            }
                            else if (e.target.id == "close") {
                                if ($("#productId").val() == 1) {
                                    @*$.ajax({
                                        type: "post",
                                        url: '@Url.Action("WeighOutValueCheck", "ManualEntry")',
                                        data: { ShipmentID: $("#shipmentId").val() },
                                        datatype: "json",
                                        async: false,
                                        traditional: true
                                    }).done(function myfunction(data) {
                                        if (data == false) {
                                            $("#errorMessagesOnSave").text("WeighBridge value not found");
                                            e.preventDefault();
                                            return;
                                        }
                                    })*@
                                }

                                if ($("#errorMessagesOnSave").text() == " ") {
                                    $("#shipmentStatusId").val(5);
                                }
                            }
                            else {
                                debugger;
                                var sumOfActualQty = 0;
                                for (var i = 0; i < $('#compTableMan tr').length; i++) {
                                    sumOfActualQty = sumOfActualQty + parseInt($('#compActualQty' + i).val());
                                    if (parseInt($('#compActualQty' + i).val()) > parseInt($('#compCapacity' + i).val())) {
                                        $("#errorMessagesOnSave").text("Actual Quantity must not be greater than the compartment capacity");
                                        e.preventDefault();
                                        return;
                                    }

                                }
                                if (sumOfActualQty > parseInt($('#odrQty').val())) {
                                    $("#errorMessagesOnSave").text("Sum of Actual Quantity must not be greater than ordered Quantity");
                                    e.preventDefault();
                                    return;
                                }

                                $("#errorMessagesOnSave").text(" ");
                            }

                }
                //$("#formAllMan").unbind('submit').submit();
            });
            $("#formAllMan").submit(function (e) {
                if ($("#errorMessagesOnSave").text() != " ") {
                    e.preventDefault();
                    return;
                }
                else {
                    $("#formAllMan").unbind('submit').submit();
                }
            });
        });

        ///////////////////////////////////////////////////////////////////compartments validations//////////////////////////////////////////////////

        function edit(id, isManual, accessCard, modifiedDate, DeletedFlag, createdDate, shipStatusId, orderId, bayId, bayName, customerName, vehicleCode, driverName, driverCnic, carrierName, shipmentDate, productId, vehicleId, odrQty, odrCode, remarks) {
  
        $("#errorMessagesOnSave").text(" ");
        $("#shipmentId").val(id)
        $("#shipmentStatusId").val(shipStatusId)
        $("#productId").val(productId)
        $("#odrQty").val(odrQty)
        $("#odrId").val(orderId)
        $("#custName").val(customerName)
        $("#vehCode").val(vehicleCode)
        $("#drvName").val(driverName)
        $("#carrName").val(carrierName)
        $("#accessId").val(accessCard)
        $('#remarks').val(remarks)
        //$("#dateShipment").val(shipmentDate)

        //if (isManual == "onclick") {
        //    $("#manualEntry").prop('checked', true);
        //}
        //else {
        //    $("#manualEntry").prop('checked', false);
        //}

        var prd;
        if (productId == 1) {
            prd = "LPG"
        }
        else {
            prd = "Condensate"
        }

        $.ajax({
            type: "post",
            url: '@Url.Action("compartmentPlanning", "ManualEntry")',
            data: {
                vehicleId: vehicleId,
                id: id
            },
            datatype: "json",
            traditional: true
        }).done(function myfunction(data) {
            $('#compTableMan').empty();
            if (data[0].isCreatedLI == true) {
                for (var i = 0; i < data.length; i++) {
                    //<td><input type="number" class="form-control" name="compManualQty' + i + '" id="compManualQty' + i + '" value="' + data[i].ManualQtyLI + '" /></td>
                    $('#compTableMan').append('<tr><input type="hidden" name="compId' + i + '" id="compId' + i + '" value= "' + data[i].CompIdLI + '" /><td><input type="text" class="form-control" name="compCode' + i + '" id="compCode' + i + '" value= "' + data[i].CompCodeLI + '" readonly /></td><td><input type="text" class="form-control" name="compOdrCode' + i + '" id="compOdrCode' + i + '" value= "' + odrCode + '" readonly /></td><td><input type="text" class="form-control" name="compPrd' + i + '" id="compPrd' + i + '" value= "' + prd + '" readonly /></td><td><input type="text" class="form-control" name="compOdrQty' + i + '" id="compOdrQty' + i + '" value= "' + data[i].OrderedQtyLI + '" readonly /></td><td><input type="text" class="form-control" name="compCapacity' + i + '" id="compCapacity' + i + '" value= "' + data[i].CapacityLI + '" readonly /></td><td><input type="number" class="form-control" name="compPlannedQty' + i + '" id="compPlannedQty' + i + '" value= "' + data[i].PlannedQtyLI + '" readonly /></td><td><input type="number" class="form-control" name="compActualQty' + i + '" id="compActualQty' + i + '" value= "' + data[i].ActualQtyLI + '" /></td><td><input type="number" class="form-control" name="compManualPreDip' + i + '" id="compManualPreDip' + i + '" value= "' + data[i].PreDip + '" onkeyup="OnClickEventForPRE_POST(compManualPreDip' + i + ', compManualPostDip' + i + ', compDelta' + i + ')"  /></td><td><input type="number" class="form-control" name="compManualPostDip' + i + '" id="compManualPostDip' + i + '" value= "' + data[i].PostDip + '" onkeyup="OnClickEventForPRE_POST(compManualPreDip' + i + ', compManualPostDip' + i + ', compDelta' + i + ')"  /></td><td><input type="number" class="form-control" name="compDelta' + i + '" id="compDelta' + i + '" value= "' + data[i].Delta + '" readonly/></td></tr>');
                }
            }
            //else {
            //    for (var i = 0; i < data.length; i++) {
            //        $('#compTableMan').append('<tr><td><input type="text" name="compCode' + i + '" id="compCode' + i + '" value= "' + data[i].Text + '" readonly /></td><td><input type="text" name="compOdrCode' + i + '" id="compOdrCode' + i + '" value= "' + odrCode + '" readonly /></td><td><input type="text" name="compPrd' + i + '" id="compPrd' + i + '" value= "' + prd + '" readonly /></td><td><input type="text" name="compCapacity' + i + '" id="compCapacity' + i + '" value= "' + data[i].Value + '" readonly /></td><td><input type="text" name="compOdrQty' + i + '" id="compOdrQty' + i + '" value= "' + odrQty + '" readonly /></td><td><input type="number" name="compPlannedQty' + i + '" id="compPlannedQty' + i + '" /></td></tr>');
            //    }
            //}
        })

        /////////////////////////////////finally unlock and lock buttons////////////////////////////////////////////
        switch (shipStatusId) {
            case "4":
                $("#save").prop("disabled", false);
                $("#close").prop("disabled", false);
                $("#remarks").prop("disabled", false);
                break;
            case "5":
                $("#save").prop("disabled", true);
                $("#close").prop("disabled", true);
                $("#remarks").prop("disabled", true);
                break;

        }
    }
    function closePressed() {
       // $("#shipmentStatusId").val(5);

    }
    </script>






